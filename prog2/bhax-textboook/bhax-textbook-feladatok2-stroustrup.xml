<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Stroustrup!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>JDK osztályok</title>
        <para>
		Írjunk olyan Boost C++ programot (indulj ki például a fénykardból) amely kilistázza a JDK összes
osztályát (miután kicsomagoltuk az src.zip állományt, arra ráengedve)!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tehat a feladatunk egy boost program írása C++ban amely kilistazza a jdk osszes osztályát . Ahoz hogy egy ilyen programot írjunk
szükségünk lesz egy ugynevezett boost könyvtárra . Ahoz hogy ezt includolni tudjuk
elsonek le kell toltenunk . Amint ezt megtettük ki kell csomagolnunk és mappájában talalható 
boostrap.bat fajlt kell futtatnunk . Ez előkészíti szamunkra a boost konyvtarat.
Ha windowson dolgozunk peldaul visual studioban meg kell tennünk a megfelelő beallításokat nyilvan egy c++ projektet kell beallítanunk illetve nyivan ahogy
fentebb emíltettem mar inculeoldnunk kell a boost könyvtárat.
A JDK eléréshez elsonek a JDK scr.zipet kell kibontatnunk a java konyvtaraban.
Ha ezt elvegeztuk kezdhetunk a programma foglalkozni
nyilvan includeolnunk kell a boost konyvatarakat.
lathatunk egy stringet amely utan egy repeat funkcio kovetkezik 
nyilvan ez a folyamat annyiszor jatszodik le mint az n erteke tehat amekkorat megadunk szamara.
Ezutan kovetkezik a main itt egyrészt jdk osztály eleresi utja ahogy lathatjuk. masreszt lathatunk egy IF
fugvenyt ennek a segítségével minden .javara vegzodo de nem a kivetelek koze tartozo kiiratunmk a konzolba .
Ahogy lathatjuk több jelet is lathatunk a konzolba. A  + száma  mapparendszerben való elhelyezkedese hatarozza meg . 
| pedig a kovetkezonek vizsgalt mappa neve.
        </para>
        
             <programlisting language="c"><![CDATA[
include <iostream> 
#include <sstream> 
#include "boost\filesystem.hpp" 
#include "boost\algorithm\string.hpp" 
#include "boost\algorithm\string\predicate.hpp" 

using namespace std; 
using namespace boost; 
using namespace boost::filesystem;

string repeat(int n, string what) {

ostringstream os; 
for (int i = 0; i < n; i++) 
os << what; 
return os.str();
}

int main() 
{ string pa = "C:\\Program Files\\Java\\jdk1.8.0_221\\src"; 
path apk_path(pa); long long count = 0; 
recursive_directory_iterator end; 
for (recursive_directory_iterator i(apk_path);i != end; i++) 
{ const path cp = ( * i); 
string name = cp.string(); 
vector < string > strs; 
split(strs, name, is_any_of("\\")); 
string fName = strs[strs.size() - 1]; 
if (fName.compare("module-info.java") == -1 && fName.compare("package 
← - 
←info.java ") == -1) { 

if (ends_with(fName, "java")) { 
cout << " " << repeat(strs.size() - 7, "+") << " " << fName. ← 
substr← 
(0, fName.size() - 5) << endl; 
count++; } 
else { 
cout << " | " << fName << " >" << endl; }
 } 
} cout << "JDK osztályok száma: " << count << endl; }
]]></programlisting>
    </section>        


    <section>
        <title>Másoló-mozgató szemantika</title>
        <para>
		Kódcsipeteken (copy és move ctor és assign) keresztül vesd össze a C++11 másoló és a mozgató
szemantikáját, a mozgató konstruktort alapozd a mozgató értékadásra!

        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        


    <section>
        <title>Hibásan implementált RSA törése</title>
        <para>
		Készítsünk betű gyakoriság alapú törést egy hibásan implementált RSA kódoló:
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog2_3.pdf (71-73 fólia) által
készített titkos szövegen.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           A kovetkezo a hibasan implementalt RSA Törés feladat lesz . Szerintem ennel a feladatnal
erdemes elsonek az RSAról illetve az RSA algoritmusról beszélnünk . Maga az RSA egy eleg híres es viszonylag 
titkosító eljaras . Maga a neve az RSA Ron Rivest , Adi Shamir és Len adleman nevéből adódik. Ők
hárman hoztak létre 1978ban. Mukodese alapjan fermat-tétellel van szoros összefuggesben . A titkosítás során
az RSA esetében 2 kulcsról egy nyílt és egy titkos kulcsal talalkozhatunk. Ez a megfelelő biztonsagú titkosításhoz 
szükséges. A feladatban ebben az esetben egy hibas RSAra van szükségünk ezert nem szöveget titkosítunk hanem karaktereket.
        </para>
        
        <para>
Ahogy a kódban lathatjuk rsa_chiper osztályban tortenik meg a kódolás .Ahogy lathatjuk a pelda szövegünk a  This is a Perfect string lesz . 
2 ciklus segítsgévével tortenik meg a kódolás ahogy fentebb mar említettem beturol beture.            
        </para>
        
                <programlisting language="c"><![CDATA[
public class rsa_chiper 
{ public static void main(String[] args) 
{ int bitlength = 2100;
SecureRandom random = new SecureRandom();

BigInteger p = BigInteger.probablePrime(bitlength/2, random); 
BigInteger q = BigInteger.probablePrime(bitlength/2, random);

BigInteger publicKey = new BigInteger("65537"); 
BigInteger modulus = p.multiply(q);

String str = "this is a perfect string".toUpperCase(); 
System.out.println("Eredeti: " + str);
byte[] out = new byte[str.length()]; 
for (int i = 0; i < str.length(); i++) { 
char c = str.charAt(i); 
if (c == ’ ’) 
out[i] = (byte)c; 
else 
out[i] = new BigInteger(new byte[] {(byte)c}).modPow(publicKey, 
modulus).byteValue(); } 

String encoded = new String(out); 
System.out.println("Kódolt:" + encoded);

Decode de = new Decode(encoded); 

System.out.println("Visszafejtett: " + de.getDecoded());
}

]]></programlisting>

        <programlisting language="c"><![CDATA[
private void loadFreqList() 
{ BufferedReader reader; 
try 
{ reader = new BufferedReader(new FileReader("freq.txt")); 
String line; 
while((line = reader.readLine()) != null) { String[] args = line.split("\t"); 
char c = args[0].charAt(0); 
int num = Integer.parseInt(args[1]); 
this.charRank.put(c, num); 
} 
} catch (Exception e) 
{ System.out.println("Error when loading list ->"+ e.getMessage()); 
} 
}
]]></programlisting>
<para>
    nyilvan ahoz hogy ezt visszafejstsük szükségünk lesz egy txt allomanyra amely tartalmazni fogja a karakterek gyakorisagat.
Itt lathatjuk a tabla beolvasast . Itt donti el a program hogy mihez mit rendel hozza  , itt vizsgalja meg  a szoveget	
termeszetesen space eseten nem vizsgal semmit egyszeruen tovabb halad. Ha talalt benne van akkor mindig egyel noveli az értéket
ha nincs benne akkor pedig hozzaadja 1-es kezdőértékkel.
</para>

 <programlisting language="c"><![CDATA[
ublic Decode(String str) { 
this.charRank = new HashMap<Character, 
Integer>(); this.decoded = str;

this.loadFreqList();
HashMap<Character, Integer> frequency = new HashMap<Character, Integer ←
 >(); 
for (int i = 0; i < str.length(); i++) { 
char c = str.charAt(i); 
if (c != ’ ’) 
if(frequency.containsKey(c)) 
frequency.put(c, frequency.get(c) + 1); 
else frequency.put(c, 1); }
while (frequency.size() > 0) { 
int mi = 0; 
char c = 0; 
for (Entry<Character, Integer> e : frequency.entrySet()) { 
if (mi < e.getValue()) { 
mi = e.getValue(); 
c = e.getKey(); 
}
 } 
this.decoded = this.decoded.replace(c, this.nextFreq()); 
frequency.remove(c); }
]]></programlisting>
<para>
    Decodolas soran lathatjuk hogy a program a gyakorisag vizsgalata miatt nem feltetlenul pontos hisz egy nem megfelelő tabla eseten nem megfeleloo
dolgokat kapunk.
</para>
        
    </section>        


    <section>
        <title>Változó argumentumszámú ctor</title>
        <para>
		Készítsünk olyan példát, amely egy képet tesz az alábbi projekt Perceptron osztályának bemenetére
és a Perceptron ne egy értéket, hanem egy ugyanakkora méretű „képet” adjon vissza. (Lásd még a 4
hét/Perceptron osztály feladatot is.)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
Ebben a feladatunkban nem massal mint a Helló ,Casear fejezetből már megismert perceptronnal kell dolgoznunk.
Ebben a helyzetben ezzel a  programmal egy kepets atalkított kepet szeretnenk visszaakapni.
Alul latható mar az atalíktott kód. Fontos kiemelni hogy a perceptron függvényt érdemes nem 1 értékre meghívni hogy 
eszlelhessük a kulonbséget . Mit is lathatunk benne Egyrészt a visszatérési érték mostmar 
double * így több értékkel tér vissza a függvény. A main függvényen belül atírásra kerültek a meghívások.
 Ahogy lathatjuk 2 ciklus segítségével vegigmegyünk a kep adatain (pixelek , meretei) . Ahogy lathatjuk a piros  és zöld
rész az eredeti kep mereit tartalmazza	 a kek pedig a kiszamolt értékeket .  Ezek segítségével létrehozzuk az uj kepunket.

        </para>
        
        <programlisting language="c"><![CDATA[
double* operat<or() ( double image [] ) 
{
 /* ... */
for(int i = 0; i < n_units[n_layers - 1]; i++) 
image[i] = units[n_layers - 1][i];
return image;
}
]]></programlisting>

      <programlisting language="c"><![CDATA[
int main ( int argc, char *argv[] )
 {
 image <rgb_pixel> png_image (argv[1]); 
image <rgb_pixel> new_png_image(png_image.get_width(), png_image. ← 
get_height()); 
int size = png_image.get_width() * png_image.get_height();

Perceptron* p = new Perceptron(3, size, 256, size);

double* image = new double[size];

for (int i{0}; i < png_image.get_width(); i++) 
for (int j{0}; j < png_image.get_height(); j++)
{ image[i * png_image.get_width() + j] = png_image[i][j].red;
} double* value = (*p)(image); 
for (int i = 0; i < png_image.get_width(); i++) 
for (int j = 0; j < png_image.get_height(); j++){ 
new_png_image[i][j].red = png_image[i][j].red; 
new_png_image[i][j].green = png_image[i][j].green; 
new_png_image[i][j].blue = value[i * png_image.get_width() + j]; 
}

new_png_image.write("uj_mandel.png"); 
delete p; 
delete [] image;
}
]]></programlisting>
        
    </section>        


    <section>
        <title>Összefoglaló</title>
        <para>
		Az előző 4 feladat egyikéről írj egy 1 oldalas bemutató „”esszé szöveget!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
   
        

</chapter>                
